(()=>{"use strict";var e={894:(e,t,n)=>{e.exports=n.p+"968e306d9e50b5ba498a.jpg"},728:(e,t,n)=>{e.exports=n.p+"26f1f57ed6681e19ca32.png"},937:(e,t,n)=>{e.exports=n.p+"4e7a75371d7aa2474767.jpg"},774:(e,t,n)=>{e.exports=n.p+"c3ac014d891603ef9217.jpg"},198:(e,t,n)=>{e.exports=n.p+"da58202c51ed49efd79b.jpg"},547:(e,t,n)=>{e.exports=n.p+"5613f08ec00393958864.jpg"}},t={};function n(r){var o=t[r];if(void 0!==o)return o.exports;var i=t[r]={exports:{}};return e[r](i,i.exports,n),i.exports}n.p="",(()=>{function e(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var t=function(){function t(e,n,r){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),this._link=e.link,this._name=e.name,this._cardSelector=n,this._handleCardClick=r}var n,r;return n=t,(r=[{key:"_getTemplate",value:function(){return document.querySelector(this._cardSelector).content.querySelector(".elements__element").cloneNode(!0)}},{key:"generateCard",value:function(){return this._element=this._getTemplate(),this._setEventListeners(),this._newImageElement=this._element.querySelector(".elements__image"),this._newTextElement=this._element.querySelector(".elements__text"),this._newImageElement.src=this._link,this._newImageElement.alt=this._name,this._newTextElement.textContent=this._name,this._element}},{key:"_toggleLikeCard",value:function(){this._element.querySelector(".elements__group").classList.toggle("elements__group_like_active")}},{key:"_deleteCard",value:function(){this._element.remove()}},{key:"_setEventListeners",value:function(){var e=this;this._element.querySelector(".elements__group").addEventListener("click",(function(){return e._toggleLikeCard()})),this._element.querySelector(".elements__btn_action_del").addEventListener("click",(function(){return e._deleteCard()})),this._element.querySelector(".elements__image").addEventListener("click",(function(){return e._handleCardClick(e._link,e._name)}))}}])&&e(n.prototype,r),t}();function r(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var o=function(){function e(t,n){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._inputSelector=t.inputSelector,this._submitButtonSelector=t.submitButtonSelector,this._inactiveButtonClass=t.inactiveButtonClass,this._inputErrorClass=t.inputErrorClass,this._errorClass=t.errorClass,this._inputList=n.querySelectorAll(this._inputSelector),this._submitButton=n.querySelector(this._submitButtonSelector),this._formElement=n}var t,n;return t=e,(n=[{key:"_showInputError",value:function(e,t){var n=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.add(this._inputErrorClass),n.classList.add(this._errorClass),n.textContent=t}},{key:"_hideInputError",value:function(e){var t=this._formElement.querySelector("#".concat(e.id,"-error"));e.classList.remove(this._inputErrorClass),t.classList.remove(this._errorClass),t.textContent=""}},{key:"_isValid",value:function(e){e.validity.valid?this._hideInputError(e):this._showInputError(e,e.validationMessage)}},{key:"hideInputSelectorError",value:function(){var e=this;this._inputList.forEach((function(t){e._hideInputError(t)}))}},{key:"toggleButtonState",value:function(){this._formElement.checkValidity()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.removeAttribute("disabled")):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.setAttribute("disabled",!0))}},{key:"_setEventListeners",value:function(){var e=this;Array.from(this._formElement.querySelectorAll(this._inputSelector)).forEach((function(t){t.addEventListener("input",(function(){e._isValid(t),e.toggleButtonState()}))}))}},{key:"enableValidation",value:function(){this._formElement.addEventListener("submit",(function(e){e.preventDefault()})),this._setEventListeners()}}])&&r(t.prototype,n),e}();function i(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var u=function(){function e(t){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._popup=document.querySelector(t),this._handleCloseEsc=this._handleCloseEsc.bind(this)}var t,n;return t=e,(n=[{key:"openPopup",value:function(){this._popup.classList.add("popup_opened"),document.addEventListener("keydown",this._handleCloseEsc)}},{key:"closePopup",value:function(){this._popup.classList.remove("popup_opened"),document.removeEventListener("keydown",this._handleCloseEsc)}},{key:"_handleCloseEsc",value:function(e){"Escape"===e.key&&this.closePopup()}},{key:"setEventListeners",value:function(){var e=this;this._popup.addEventListener("click",(function(t){(t.target.classList.contains("popup")||t.target.classList.contains("popup__close-icon"))&&e.closePopup()}))}}])&&i(t.prototype,n),e}();function c(e){return c="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},c(e)}function l(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function a(e,t,n){return a="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=f(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},a(e,t,n||e)}function s(e,t){return s=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},s(e,t)}function p(e,t){if(t&&("object"===c(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}var _=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&s(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=f(r);if(o){var n=f(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return p(this,e)});function u(e,t){var n;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(n=i.call(this,e))._popupForm=n._popup.querySelector(".form"),n._inputList=n._popupForm.querySelectorAll(".form__field"),n._submitForm=t,n}return t=u,(n=[{key:"_getInputValues",value:function(){var e=this;return this._inputValues={},this._inputList.forEach((function(t){e._inputValues[t.name]=t.value})),this._inputValues}},{key:"setEventListeners",value:function(){var e=this;a(f(u.prototype),"setEventListeners",this).call(this),this._popupForm.addEventListener("submit",(function(t){t.preventDefault(),e._submitForm()})),a(f(u.prototype),"setEventListeners",this).call(this)}},{key:"closePopup",value:function(){a(f(u.prototype),"closePopup",this).call(this),this._popupForm.reset()}}])&&l(t.prototype,n),u}(u);function m(e){return m="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},m(e)}function d(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}function y(e,t,n){return y="undefined"!=typeof Reflect&&Reflect.get?Reflect.get:function(e,t,n){var r=function(e,t){for(;!Object.prototype.hasOwnProperty.call(e,t)&&null!==(e=b(e)););return e}(e,t);if(r){var o=Object.getOwnPropertyDescriptor(r,t);return o.get?o.get.call(n):o.value}},y(e,t,n||e)}function h(e,t){return h=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e},h(e,t)}function v(e,t){if(t&&("object"===m(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return function(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}(e)}function b(e){return b=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)},b(e)}var g=function(e){!function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&h(e,t)}(u,e);var t,n,r,o,i=(r=u,o=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,t=b(r);if(o){var n=b(this).constructor;e=Reflect.construct(t,arguments,n)}else e=t.apply(this,arguments);return v(this,e)});function u(e,t,n){var r;return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,u),(r=i.call(this,e))._popupImage=t,r._popupTitle=n,r}return t=u,(n=[{key:"openPopup",value:function(e){var t=e.linkElement,n=e.titleElement;this._popupImage.src=t,this._popupImage.alt=n,this._popupTitle.textContent=n,y(b(u.prototype),"openPopup",this).call(this)}}])&&d(t.prototype,n),u}(u);function S(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var E=function(){function e(t,n){var r=t.items,o=t.renderer;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._items=r,this._renderer=o,this._containerSelector=n}var t,n;return t=e,(n=[{key:"initialCards",value:function(){var e=this;this._items.forEach((function(t){e._renderer(t)}))}},{key:"addItem",value:function(e){this._containerSelector.prepend(e)}}])&&S(t.prototype,n),e}();function k(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var w=function(){function e(t){var n=t.nameSelector,r=t.infoSelector;!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this._name=document.querySelector(n),this._info=document.querySelector(r)}var t,n;return t=e,(n=[{key:"getUserInfo",value:function(){return{name:this._name.textContent,info:this._info.textContent}}},{key:"setUserInfo",value:function(e){var t=e.name,n=e.info;this._name.textContent=t,this._info.textContent=n}}])&&k(t.prototype,n),e}(),C=[{link:n(894),name:"Карачаево-Черкесия"},{link:n(728),name:"Гора Эльбрус"},{link:n(937),name:"Домбай"},{link:n(774),name:"Байкал"},{link:n(198),name:"Сочи"},{link:n(547),name:"Карелия"}],L=document.querySelector(".profile__edit-button"),q=(document.querySelector(".profile__title"),document.querySelector(".profile__subtitle"),document.querySelector(".popup_profile_editing"),document.querySelector(".popup__close-icon_profile_edit"),document.querySelector(".form__field_item_name")),O=document.querySelector(".form__field_item_job"),P=document.querySelector(".form_profile_edit"),j=(document.querySelector(".popup_container_cards"),document.querySelector(".profile__add-button")),x=(document.querySelector(".popup__close-icon_close_cards"),document.querySelector(".popup__form_add_cards")),B=document.querySelector(".form__field_item_title"),I=document.querySelector(".form__field_item_link"),R=document.querySelector(".template-container"),T=(document.querySelector(".popup_content_image"),document.querySelector(".popup__image")),V=(document.querySelector(".template-container"),document.querySelector(".popup__close-icon_close_image")),A=document.querySelector(".popup__image-caption"),D={formSelector:".popup__form",inputSelector:".form__field",submitButtonSelector:".form__button",inactiveButtonClass:"form__button_btn_notactive",inputErrorClass:"form__field_error_active",errorClass:"form__field-error_status_error"},F=new o(D,P),U=new o(D,x);F.enableValidation(),U.enableValidation();var M=new g(".popup_content_image",T,A);function N(e,t){M.openPopup({linkElement:e,titleElement:t})}M.setEventListeners(),V.addEventListener("click",(function(){return M.closePopup(".popup_content_image")}));var z=new w({nameSelector:".profile__title",infoSelector:".profile__subtitle"}),G=new _(".popup_profile_editing",(function(){z.setUserInfo({name:q.value,info:O.value}),G.closePopup()}));G.setEventListeners(),L.addEventListener("click",(function(){var e=z.getUserInfo();q.value=e.name,O.value=e.info,G.openPopup(),F.toggleButtonState(),F.hideInputSelectorError()}));var H=new _(".popup_container_cards",(function(){var e=I.value,t=B.value,n=J({link:e,name:t});K.addItem(n),H.closePopup()}));H.setEventListeners(),j.addEventListener("click",(function(){H.openPopup(),U.toggleButtonState(),U.hideInputSelectorError()}));var J=function(e){return new t(e,".elements",N).generateCard()},K=new E({items:C,renderer:function(e){var t=J(e);K.addItem(t)}},R);K.initialCards()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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L0JvRCxFQUFnQnJCLEVBQWdCL0IsTUFPaENxRCxFQUFjQyxFQUxKLENBQ2hCbkksS0FBTWdJLEVBQ045SCxLQUFNK0gsSUFLTkcsRUFBZ0JDLFFBQVFILEdBQ3hCSCxFQUFjM0QsZ0JBekJoQjJELEVBQWNQLG9CQVVkZCxFQUFldEYsaUJBQWlCLFNBUGhDLFdBQ0UyRyxFQUFjUixZQUNkSCxFQUFrQjNELG9CQUNsQjJELEVBQWtCVSw0QkF1QnBCLElBQU1LLEVBQWMsU0FBQ3RDLEdBR25CLE9BRmEsSUFBSW5HLEVBQUttRyxFQUFNLFlBQWFoRyxHQUNoQnlJLGdCQUtyQkYsRUFBa0IsSUFBSTlDLEVBQVMsQ0FFbkNFLE1BQU9hLEVBRVBaLFNBQVUsU0FBQ0ksR0FDVCxJQUFNMEMsRUFBUUosRUFBWXRDLEdBQzFCdUMsRUFBZ0JDLFFBQVFFLEtBRzVCekIsR0FHQXNCLEVBQWdCL0IsZ0IiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9tZXN0by93ZWJwYWNrL2Jvb3RzdHJhcCIsIndlYnBhY2s6Ly9tZXN0by93ZWJwYWNrL3J1bnRpbWUvcHVibGljUGF0aCIsIndlYnBhY2s6Ly9tZXN0by8uL3NyYy9jb21wb25lbnRzL0NhcmQuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Gb3JtVmFsaWRhdG9yLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXAuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvUG9wdXBXaXRoSW1hZ2UuanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvY29tcG9uZW50cy9TZWN0aW9uLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL2NvbXBvbmVudHMvVXNlckluZm8uanMiLCJ3ZWJwYWNrOi8vbWVzdG8vLi9zcmMvdXRpbHMvY29uc3RhbnRzLmpzIiwid2VicGFjazovL21lc3RvLy4vc3JjL3BhZ2VzL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIFRoZSBtb2R1bGUgY2FjaGVcbnZhciBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18gPSB7fTtcblxuLy8gVGhlIHJlcXVpcmUgZnVuY3Rpb25cbmZ1bmN0aW9uIF9fd2VicGFja19yZXF1aXJlX18obW9kdWxlSWQpIHtcblx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG5cdHZhciBjYWNoZWRNb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdO1xuXHRpZiAoY2FjaGVkTW9kdWxlICE9PSB1bmRlZmluZWQpIHtcblx0XHRyZXR1cm4gY2FjaGVkTW9kdWxlLmV4cG9ydHM7XG5cdH1cblx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcblx0dmFyIG1vZHVsZSA9IF9fd2VicGFja19tb2R1bGVfY2FjaGVfX1ttb2R1bGVJZF0gPSB7XG5cdFx0Ly8gbm8gbW9kdWxlLmlkIG5lZWRlZFxuXHRcdC8vIG5vIG1vZHVsZS5sb2FkZWQgbmVlZGVkXG5cdFx0ZXhwb3J0czoge31cblx0fTtcblxuXHQvLyBFeGVjdXRlIHRoZSBtb2R1bGUgZnVuY3Rpb25cblx0X193ZWJwYWNrX21vZHVsZXNfX1ttb2R1bGVJZF0obW9kdWxlLCBtb2R1bGUuZXhwb3J0cywgX193ZWJwYWNrX3JlcXVpcmVfXyk7XG5cblx0Ly8gUmV0dXJuIHRoZSBleHBvcnRzIG9mIHRoZSBtb2R1bGVcblx0cmV0dXJuIG1vZHVsZS5leHBvcnRzO1xufVxuXG4iLCJfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIlwiOyIsIlxyXG4vLyDQmtC70LDRgdGBINC00LvRjyDRgdC+0LfQtNCw0L3QuNGPINC60LDRgNGC0L7Rh9C10LpcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ2FyZCB7XHJcbiAgY29uc3RydWN0b3IoZGF0YSwgY2FyZFNlbGVjdG9yLCBoYW5kbGVDYXJkQ2xpY2spIHtcclxuICAgIHRoaXMuX2xpbmsgPSBkYXRhLmxpbms7XHJcbiAgICB0aGlzLl9uYW1lID0gZGF0YS5uYW1lO1xyXG4gICAgdGhpcy5fY2FyZFNlbGVjdG9yID0gY2FyZFNlbGVjdG9yO1xyXG4gICAgdGhpcy5faGFuZGxlQ2FyZENsaWNrID0gaGFuZGxlQ2FyZENsaWNrO1xyXG4gIH1cclxuICAvLyDQv9C+0LvRg9GH0LDQtdC8INC60LDRgNGC0L7Rh9C60YNcclxuICBfZ2V0VGVtcGxhdGUoKSB7XHJcbiAgICBjb25zdCBjYXJkRWxlbWVudCA9IGRvY3VtZW50XHJcbiAgICAgIC5xdWVyeVNlbGVjdG9yKHRoaXMuX2NhcmRTZWxlY3RvcilcclxuICAgICAgLmNvbnRlbnRcclxuICAgICAgLnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50c19fZWxlbWVudCcpXHJcbiAgICAgIC5jbG9uZU5vZGUodHJ1ZSk7XHJcblxyXG4gICAgcmV0dXJuIGNhcmRFbGVtZW50O1xyXG4gIH1cclxuLy8g0L3QsNC/0L7Qu9C90Y/QtdC8INC60LDRgNGC0L7Rh9C60YMg0LTQsNC90L3Ri9C80LgsINC/0LXRgNC10LTQsNC10Lwg0Y3RgtC+0YIg0LzQtdGC0L7QtCDQtNC70Y8g0L7RgtGA0LjRgdC+0LLQutC4INC60LDRgNGC0L7Rh9C60Lgg0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbiAgZ2VuZXJhdGVDYXJkKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudCA9IHRoaXMuX2dldFRlbXBsYXRlKCk7XHJcbiAgICB0aGlzLl9zZXRFdmVudExpc3RlbmVycygpXHJcbiAgICBcclxuXHJcbiAgICB0aGlzLl9uZXdJbWFnZUVsZW1lbnQgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50c19faW1hZ2UnKTtcclxuICAgIHRoaXMuX25ld1RleHRFbGVtZW50ID0gdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudHNfX3RleHQnKTtcclxuICAgIHRoaXMuX25ld0ltYWdlRWxlbWVudC5zcmMgPSB0aGlzLl9saW5rO1xyXG4gICAgdGhpcy5fbmV3SW1hZ2VFbGVtZW50LmFsdCA9IHRoaXMuX25hbWU7XHJcbiAgICB0aGlzLl9uZXdUZXh0RWxlbWVudC50ZXh0Q29udGVudCA9IHRoaXMuX25hbWU7XHJcbiAgICBcclxuICAgIFxyXG4gICAgXHJcbiAgICByZXR1cm4gdGhpcy5fZWxlbWVudDtcclxuICB9XHJcbiAgLy8g0LzQtdGC0L7QtCDQtNC+0LHQsNCy0LvQtdC90LjQtSDQu9Cw0LnQutCwXHJcbiAgX3RvZ2dsZUxpa2VDYXJkKCkge1xyXG4gICAgY29uc3QgZWxlbWVudExpa2UgPSB0aGlzLl9lbGVtZW50LnF1ZXJ5U2VsZWN0b3IoJy5lbGVtZW50c19fZ3JvdXAnKVxyXG4gICAgZWxlbWVudExpa2UuY2xhc3NMaXN0LnRvZ2dsZSgnZWxlbWVudHNfX2dyb3VwX2xpa2VfYWN0aXZlJyk7XHJcbiAgfTtcclxuICBcclxuICAvLyDQvNC10YLQvtC0INGD0LTQsNC70LXQvdC40LUg0LrQsNGA0YLQvtGH0LrQuFxyXG4gIF9kZWxldGVDYXJkKCkge1xyXG4gICAgdGhpcy5fZWxlbWVudC5yZW1vdmUoKTtcclxuICB9O1xyXG5cclxuICAgLy8g0JTQvtCx0LDQstC70Y/QtdC8INC+0LHRgNCw0LHQvtGC0YfQuNC60LggINC90LAg0LvQsNC50Log0Lgg0YPQtNCw0LvQtdC90LjQtSDQutCw0YDRgtC+0YfQutC4XHJcbiAgX3NldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgLy8g0LvQsNC50LpcclxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRzX19ncm91cCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5fdG9nZ2xlTGlrZUNhcmQoKSk7XHJcbiAgICAvLyDQo9C00LDQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C60LhcclxuICAgIHRoaXMuX2VsZW1lbnQucXVlcnlTZWxlY3RvcignLmVsZW1lbnRzX19idG5fYWN0aW9uX2RlbCcpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgKCkgPT4gdGhpcy5fZGVsZXRlQ2FyZCgpKTtcclxuICAgIC8vINCe0YLQutGA0YvRgtC40LUg0L/QvtC/0LDQv9CwINC/0YDQvtGB0LzQvtGC0YDQsCDQutCw0YDRgtC40L3QvtC6IFxyXG4gICAgdGhpcy5fZWxlbWVudC5xdWVyeVNlbGVjdG9yKCcuZWxlbWVudHNfX2ltYWdlJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiB0aGlzLl9oYW5kbGVDYXJkQ2xpY2sodGhpcy5fbGluaywgdGhpcy5fbmFtZSkpO1xyXG4gIH07XHJcbn07XHJcblxyXG4iLCIgLy8g0JrQu9Cw0YHRgSDQstCw0LvQuNC00LDRhtC40Lgg0YTQvtGA0LxcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRm9ybVZhbGlkYXRvciB7XHJcbiAgY29uc3RydWN0b3IoY29uZmlnLCBmb3JtRWxlbWVudCkge1xyXG4gICAgdGhpcy5faW5wdXRTZWxlY3RvciA9IGNvbmZpZy5pbnB1dFNlbGVjdG9yO1xyXG4gICAgdGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IgPSBjb25maWcuc3VibWl0QnV0dG9uU2VsZWN0b3I7XHJcbiAgICB0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzID0gY29uZmlnLmluYWN0aXZlQnV0dG9uQ2xhc3M7XHJcbiAgICB0aGlzLl9pbnB1dEVycm9yQ2xhc3MgPSBjb25maWcuaW5wdXRFcnJvckNsYXNzO1xyXG4gICAgdGhpcy5fZXJyb3JDbGFzcyA9IGNvbmZpZy5lcnJvckNsYXNzO1xyXG4gICAgdGhpcy5faW5wdXRMaXN0ID0gZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvckFsbCh0aGlzLl9pbnB1dFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbiA9IGZvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3IodGhpcy5fc3VibWl0QnV0dG9uU2VsZWN0b3IpO1xyXG5cclxuICAgIHRoaXMuX2Zvcm1FbGVtZW50ID0gZm9ybUVsZW1lbnQ7XHJcbiAgfTtcclxuICAgLy8g0YTRg9C90LrRhtC40Y8g0LTQvtCx0LDQstC70LXQvdC40Y8g0L7RiNC40LHQutC4XHJcbiAgX3Nob3dJbnB1dEVycm9yIChpbnB1dEVsZW1lbnQsIGVycm9yTWVzc2FnZSkge1xyXG4gICAgY29uc3QgZXJyb3JFbGVtZW50ID0gdGhpcy5fZm9ybUVsZW1lbnQucXVlcnlTZWxlY3RvcihgIyR7aW5wdXRFbGVtZW50LmlkfS1lcnJvcmApO1xyXG4gICAgaW5wdXRFbGVtZW50LmNsYXNzTGlzdC5hZGQodGhpcy5faW5wdXRFcnJvckNsYXNzKTtcclxuICAgIGVycm9yRWxlbWVudC5jbGFzc0xpc3QuYWRkKHRoaXMuX2Vycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LnRleHRDb250ZW50ID0gZXJyb3JNZXNzYWdlO1xyXG4gIH07XHJcblxyXG4vLyDRhNGD0L3QutGG0LjRjyDRg9C00LDQu9C10L3QuNGPINC+0YjQuNCx0LrQuFxyXG4gIF9oaWRlSW5wdXRFcnJvciAoaW5wdXRFbGVtZW50KSB7XHJcbiAgICBjb25zdCBlcnJvckVsZW1lbnQgPSB0aGlzLl9mb3JtRWxlbWVudC5xdWVyeVNlbGVjdG9yKGAjJHtpbnB1dEVsZW1lbnQuaWR9LWVycm9yYCk7XHJcbiAgICBpbnB1dEVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbnB1dEVycm9yQ2xhc3MpO1xyXG4gICAgZXJyb3JFbGVtZW50LmNsYXNzTGlzdC5yZW1vdmUodGhpcy5fZXJyb3JDbGFzcyk7XHJcbiAgICBlcnJvckVsZW1lbnQudGV4dENvbnRlbnQgPSAnJztcclxuICB9O1xyXG5cclxuICAgLy8g0J/RgNC+0LLQtdGA0LrQsCDQvdCwINCy0LDQu9C40LTQvdC+0YHRgtGMXHJcbiAgX2lzVmFsaWQgKGlucHV0RWxlbWVudCkge1xyXG4gICAgaWYgKCFpbnB1dEVsZW1lbnQudmFsaWRpdHkudmFsaWQpIHtcclxuICAgICAgdGhpcy5fc2hvd0lucHV0RXJyb3IoaW5wdXRFbGVtZW50LCBpbnB1dEVsZW1lbnQudmFsaWRhdGlvbk1lc3NhZ2UpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgdGhpcy5faGlkZUlucHV0RXJyb3IoaW5wdXRFbGVtZW50KTtcclxuICAgIH1cclxuICB9OyBcclxuXHJcbiAgLy8g0KTRg9C90LrRhtC40Y8g0YPQsdC40YDQsNC10Lwg0L7RiNC40LHQutC4INC/0YDQuCDQvtGC0LrRgNGL0YLQuNC4INC/0L7Qv9Cw0L/QvtCyXHJcbiAgaGlkZUlucHV0U2VsZWN0b3JFcnJvcigpIHtcclxuICAgICAgdGhpcy5faW5wdXRMaXN0LmZvckVhY2goKGlucHV0RWxlbWVudCkgPT4ge1xyXG4gICAgICB0aGlzLl9oaWRlSW5wdXRFcnJvciAoaW5wdXRFbGVtZW50KTtcclxuICAgIH0pO1xyXG4gIH07XHJcblxyXG4gIC8vINCk0YPQvdC60YbQuNGPINC00LXQu9Cw0LXQvCAg0LrQvdC+0L/QutGDINC90LUg0LDQutGC0LjQstC90L7QuSDQuNC70Lgg0LDQutGC0LjQstC90L7QuSBcclxuICB0b2dnbGVCdXR0b25TdGF0ZSgpIHtcclxuICAgIGNvbnN0IGZvcm1WYWxpZCA9IHRoaXMuX2Zvcm1FbGVtZW50LmNoZWNrVmFsaWRpdHkoKTsgXHJcblxyXG4gICAgaWYgKCFmb3JtVmFsaWQpIHtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLmNsYXNzTGlzdC5hZGQodGhpcy5faW5hY3RpdmVCdXR0b25DbGFzcyk7XHJcbiAgICAgIHRoaXMuX3N1Ym1pdEJ1dHRvbi5zZXRBdHRyaWJ1dGUoJ2Rpc2FibGVkJywgdHJ1ZSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLl9zdWJtaXRCdXR0b24uY2xhc3NMaXN0LnJlbW92ZSh0aGlzLl9pbmFjdGl2ZUJ1dHRvbkNsYXNzKTtcclxuICAgICAgdGhpcy5fc3VibWl0QnV0dG9uLnJlbW92ZUF0dHJpYnV0ZSgnZGlzYWJsZWQnKTtcclxuICAgIH1cclxuICB9O1xyXG5cclxuICBcclxuICAgIC8vINCd0LDRhdC+0LTQuNC8INC/0L7Qu9GPINCy0LLQvtC00LBcclxuICBfc2V0RXZlbnRMaXN0ZW5lcnMoKSB7XHJcbiAgICBjb25zdCBpbnB1dExpc3QgPSBBcnJheS5mcm9tKHRoaXMuX2Zvcm1FbGVtZW50LnF1ZXJ5U2VsZWN0b3JBbGwodGhpcy5faW5wdXRTZWxlY3RvcikpO1xyXG4gICAgICBpbnB1dExpc3QuZm9yRWFjaCgoaW5wdXRFbGVtZW50KSA9PiB7XHJcbiAgICAgICAgaW5wdXRFbGVtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2lucHV0JywgKCkgPT4ge1xyXG4gICAgICAgICAgdGhpcy5faXNWYWxpZChpbnB1dEVsZW1lbnQpO1xyXG4gICAgICAgICAgdGhpcy50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gICAgICAgIH0pO1xyXG4gICAgICAgIFxyXG4gICAgICB9KTtcclxuICAgICAgXHJcbiAgfTtcclxuXHJcbiAgLy/Qt9Cw0L/Rg9GB0LrQsNC10Lwg0LLQsNC70LjQtNCw0YbQuNGOIFxyXG4gIGVuYWJsZVZhbGlkYXRpb24oKSB7XHJcbiAgICB0aGlzLl9mb3JtRWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB9KTtcclxuICAgICAgdGhpcy5fc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9O1xyXG59OyIsIi8vINCa0LvQsNGB0YEg0L/QvtC/0LDQv9CwIFxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IgKHBvcHVwU2VsZWN0b3IpIHtcclxuICAgIHRoaXMuX3BvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcihwb3B1cFNlbGVjdG9yKTtcclxuICAgIHRoaXMuX2hhbmRsZUNsb3NlRXNjID0gdGhpcy5faGFuZGxlQ2xvc2VFc2MuYmluZCh0aGlzKTsgXHJcbiAgfTtcclxuICAvLyDQvtGC0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QsFxyXG4gIG9wZW5Qb3B1cCgpIHtcclxuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5hZGQoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUNsb3NlRXNjKTtcclxuICB9XHJcblxyXG4gIC8vINC30LDQutGA0YvRgtC40LUg0L/QvtC/0LDQv9CwXHJcbiAgY2xvc2VQb3B1cCgpIHtcclxuICAgIHRoaXMuX3BvcHVwLmNsYXNzTGlzdC5yZW1vdmUoJ3BvcHVwX29wZW5lZCcpO1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcigna2V5ZG93bicsIHRoaXMuX2hhbmRsZUNsb3NlRXNjKTtcclxuICB9XHJcblxyXG4gIC8vINC30LDQutGA0YvRgtC40LUg0L/QvtC/0LDQv9CwINC/0L4g0LrQvdC+0L/QutC1IEVTQ1xyXG4gIF9oYW5kbGVDbG9zZUVzYyhldmVudCkge1xyXG4gICAgaWYoZXZlbnQua2V5ID09PSAnRXNjYXBlJykge1xyXG4gICAgICB0aGlzLmNsb3NlUG9wdXAoKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vINC00L7QsdCw0LLQu9GP0LXRgiDRgdC70YPRiNCw0YLQtdC70Ywg0LrQu9C40LrQsCDQv9C+INC60YDQtdGB0YLQuNC60YMg0LfQsNC60YDRi9GC0LjRj1xyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgdGhpcy5fcG9wdXAuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGlmIChldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXAnKSB8fCBldnQudGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucygncG9wdXBfX2Nsb3NlLWljb24nKVxyXG4gICkge1xyXG4gICAgdGhpcy5jbG9zZVBvcHVwKCk7XHJcbiAgfVxyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuXHJcbn0iLCIvLyDQn9C+0L/QsNC/INGE0L7RgNC80YtcclxuaW1wb3J0IFBvcHVwIGZyb20gJy4vUG9wdXAuanMnO1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBQb3B1cFdpdGhGb3JtIGV4dGVuZHMgUG9wdXAge1xyXG4gIGNvbnN0cnVjdG9yKHBvcHVwU2VsZWN0b3IsIHN1Ym1pdEZvcm0pIHtcclxuICAgIHN1cGVyKHBvcHVwU2VsZWN0b3IpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtID0gdGhpcy5fcG9wdXAucXVlcnlTZWxlY3RvcignLmZvcm0nKTtcclxuICAgIHRoaXMuX2lucHV0TGlzdCA9IHRoaXMuX3BvcHVwRm9ybS5xdWVyeVNlbGVjdG9yQWxsKCcuZm9ybV9fZmllbGQnKTtcclxuICAgIHRoaXMuX3N1Ym1pdEZvcm0gPSBzdWJtaXRGb3JtXHJcbiAgICBcclxuICB9O1xyXG5cclxuICAvLyDRgdC+0LHQuNGA0LDQtdC8INC00LDQvdC90YvQtSDQv9C+0LvQtdC5ICDQstCy0L7QtNCwXHJcbiAgX2dldElucHV0VmFsdWVzKCkge1xyXG4gICAgdGhpcy5faW5wdXRWYWx1ZXMgPSB7fTtcclxuICAgIHRoaXMuX2lucHV0TGlzdC5mb3JFYWNoKGlucHV0ID0+IHtcclxuICAgICAgdGhpcy5faW5wdXRWYWx1ZXNbaW5wdXQubmFtZV0gPSBpbnB1dC52YWx1ZTtcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXMuX2lucHV0VmFsdWVzO1xyXG4gIH1cclxuXHJcbiAgLy8g0L/QtdGA0LXQt9Cw0L/QuNGB0YvQstCw0LXQvCDRgNC+0LTQuNC10LvRjNGB0LrQuNC5INC80LXRgtC+0LQsINC00L7QsdCw0LLQu9GP0LXRgiDQvtCx0YDQsNCx0L7RgtGH0LjQuiDRgdCw0LHQvNC40YLQsCDRhNC+0YDQvNGLLlxyXG4gIHNldEV2ZW50TGlzdGVuZXJzKCkge1xyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICAgIHRoaXMuX3BvcHVwRm9ybS5hZGRFdmVudExpc3RlbmVyKCdzdWJtaXQnLCAoZXZ0KSA9PiB7XHJcbiAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpO1xyXG4gICAgICB0aGlzLl9zdWJtaXRGb3JtKCk7XHJcbiAgICB9KVxyXG4gICAgc3VwZXIuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuICB9XHJcbiAgLy/QvdCw0YHQu9C10LTRg9C10Lwg0LfQsNC60YDRi9GC0LjQtSDQv9C+0L/QsNC/0LAg0L7Rh9C40YnQsNC10Lwg0L/QvtC70Y9cclxuICBjbG9zZVBvcHVwKCkge1xyXG4gICAgc3VwZXIuY2xvc2VQb3B1cCgpO1xyXG4gICAgdGhpcy5fcG9wdXBGb3JtLnJlc2V0KCk7XHJcbiAgfVxyXG59IiwiLy8g0J/QvtC/0LDQvyDQv9GA0L7RgdC80L7RgtGA0LAg0LrQsNGA0YLQuNC90L7QulxyXG5pbXBvcnQgUG9wdXAgZnJvbSAnLi9Qb3B1cC5qcyc7XHJcbi8vINGB0L7Qt9C00LDQtdC8INC90L7QstGL0Lkg0LrQu9Cw0YHRgSDQvdCw0YHQu9C10LTRg9GPINC+0YIg0LrQu9GB0YHQsCDQn9C+0L/QsNC/0LBcclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9wdXBXaXRoSW1hZ2UgZXh0ZW5kcyBQb3B1cCB7XHJcbiAgY29uc3RydWN0b3IocG9wdXBTZWxlY3RvciwgcG9wdXBJbWFnZSwgcG9wdXBUaXRsZSkge1xyXG4gICAgc3VwZXIocG9wdXBTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9wb3B1cEltYWdlID0gcG9wdXBJbWFnZTtcclxuICAgIHRoaXMuX3BvcHVwVGl0bGUgPSBwb3B1cFRpdGxlO1xyXG4gIH1cclxuICAvLyDQvdCw0YHQu9C10LTRg9C10Lwg0L7RgiDRgNCw0LTQuNGC0LXQu9GM0YHQutC+0LPQviDQv9C+0L/QsNC/0LAg0L7RgtC60YDRi9GC0LjQtSDQuCDQuNC30LzQtdC90Y/QtdC8IFxyXG4gIG9wZW5Qb3B1cCh7IGxpbmtFbGVtZW50LCB0aXRsZUVsZW1lbnQgfSkge1xyXG4gICAgdGhpcy5fcG9wdXBJbWFnZS5zcmMgPSBsaW5rRWxlbWVudDtcclxuICAgIHRoaXMuX3BvcHVwSW1hZ2UuYWx0ID0gdGl0bGVFbGVtZW50O1xyXG4gICAgdGhpcy5fcG9wdXBUaXRsZS50ZXh0Q29udGVudCA9IHRpdGxlRWxlbWVudDtcclxuXHJcbiAgICBzdXBlci5vcGVuUG9wdXAoKTtcclxufVxyXG5cclxufSIsIi8vINCa0LvQsNGB0YEg0L/QtdGA0LXQsdC10YDQsNC10YIg0Y3Qu9C10LzQtdC90YLRiyDQutCw0YDRgtC+0YfQtdC6INC4INC00L7QsdCw0LLQu9GP0LXRgiAg0L3QsCDRgdGC0YDQsNC90LjRhtGDXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNlY3Rpb24ge1xyXG4gIGNvbnN0cnVjdG9yICh7IGl0ZW1zLCByZW5kZXJlciB9LCBzZWxlY3RvckNvbnRhaW5lcikge1xyXG4gICAgdGhpcy5faXRlbXMgPSBpdGVtcztcclxuICAgIHRoaXMuX3JlbmRlcmVyID0gcmVuZGVyZXI7XHJcbiAgICB0aGlzLl9jb250YWluZXJTZWxlY3RvciA9IHNlbGVjdG9yQ29udGFpbmVyXHJcbiAgICBcclxuICB9O1xyXG5cclxuICAvL9C+0YLRgNC40YHQvtCy0LrQsCDQstGB0LXRhSDRjdC70LXQvNC10L3RgtC+0LIgINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gIGluaXRpYWxDYXJkcygpIHtcclxuICAgIHRoaXMuX2l0ZW1zLmZvckVhY2goaXRlbSA9PiB7XHJcbiAgICAgIHRoaXMuX3JlbmRlcmVyKGl0ZW0pO1xyXG4gICAgfSk7XHJcbiAgfVxyXG5cclxuICAvL9C/0YDQuNC90LjQvNCw0LXRgiBET00t0Y3Qu9C10LzQtdC90YIg0Lgg0LTQvtCx0LDQstC70Y/QtdGCINC10LPQviDQsiDQutC+0L3RgtC10LnQvdC10YBcclxuICBhZGRJdGVtKGVsZW1lbnQpIHtcclxuICAgIHRoaXMuX2NvbnRhaW5lclNlbGVjdG9yLnByZXBlbmQoZWxlbWVudCk7XHJcbiAgfVxyXG5cclxuXHJcbn0iLCIvL9Ca0LvQsNGB0YEg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDQv9GA0L7RhNC40LvRjyDRgdC+0LHQuNGA0LDQtdGCINC00LDQvdC90YvQtSDQuCDQtNC+0LHQsNCy0LvRj9C10YIg0L3QsCDRgdGC0YDQsNC90LjRhtGDXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFVzZXJJbmZvIHtcclxuICBjb25zdHJ1Y3Rvcih7IG5hbWVTZWxlY3RvciwgaW5mb1NlbGVjdG9yIH0pIHtcclxuICAgIHRoaXMuX25hbWUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKG5hbWVTZWxlY3Rvcik7XHJcbiAgICB0aGlzLl9pbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihpbmZvU2VsZWN0b3IpOztcclxuICAgIFxyXG4gIH1cclxuXHJcbiAgLy8g0LLQvtC30LLRgNCw0YnQsNC10YIg0L7QsdGK0LXQutGCINGBINC00LDQvdC90YvQvNC4INC/0L7Qu9GM0LfQvtCy0LDRgtC10LvRjy5cclxuICBnZXRVc2VySW5mbygpIHtcclxuICAgIHJldHVybiB7XHJcbiAgICAgIG5hbWU6IHRoaXMuX25hbWUudGV4dENvbnRlbnQsXHJcbiAgICAgIGluZm86IHRoaXMuX2luZm8udGV4dENvbnRlbnRcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvL9C/0YDQuNC90LjQvNCw0LXRgiDQvdC+0LLRi9C1INC00LDQvdC90YvQtSDQv9C+0LvRjNC30L7QstCw0YLQtdC70Y8g0Lgg0LTQvtCx0LDQstC70Y/QtdGCINC40YUg0L3QsCDRgdGC0YDQsNC90LjRhtGDLlxyXG4gIHNldFVzZXJJbmZvKHsgbmFtZSwgaW5mbyB9KSB7XHJcbiAgICB0aGlzLl9uYW1lLnRleHRDb250ZW50ID0gbmFtZTtcclxuICAgIHRoaXMuX2luZm8udGV4dENvbnRlbnQgPSBpbmZvO1xyXG4gIH1cclxuXHJcbn1cclxuXHJcbiIsIi8v0LjQvNC/0L7RgNGCINC60LDRgNGC0LjQvdC+0Log0LTQu9GPIFdlYnBhY2sgXHJcbmltcG9ydCBjYXJhY2hhZXZvIGZyb20gJy4uL2ltYWdlcy9raXJpbGwtcGVyc2hpbi0xMDg4NDA0LmpwZyc7XHJcbmltcG9ydCBlbGJydXMgZnJvbSAnLi4vaW1hZ2VzL2tpcmlsbC1wZXJzaGluLTE0MDQ2ODEtdW5zcGxhc2gucG5nJztcclxuaW1wb3J0IGRvbWJpeSBmcm9tICcuLi9pbWFnZXMva2lyaWxsLXBlcnNoaW4tMTU1NjM1NS11bnNwbGFzaC5qcGcnO1xyXG5pbXBvcnQgYmlrYWwgZnJvbSAnLi4vaW1hZ2VzL3Bob3RvLWdyaWQtYmFpa2FsLTIuanBnJztcclxuaW1wb3J0IHNvY2hpIGZyb20gJy4uL2ltYWdlcy9waG90by1ncmlkLXNvY2hpLmpwZyc7XHJcbmltcG9ydCBrYXJlbGlhIGZyb20gJy4uL2ltYWdlcy9wbGFjZS1rYXJlbGlhLmpwZyc7XHJcblxyXG4vLyDQnNCw0YHRgdC40LIg0YEg0LTQsNC90L3Ri9C80Lgg0LrQsNGA0YLQvtGH0LXQulxyXG5jb25zdCBpbml0aWFsQ2FyZHMgPSBbXHJcbiAge1xyXG4gICAgbGluazogY2FyYWNoYWV2byxcclxuICAgIG5hbWU6ICfQmtCw0YDQsNGH0LDQtdCy0L4t0KfQtdGA0LrQtdGB0LjRjydcclxuICB9LFxyXG4gIHtcclxuICAgIGxpbms6IGVsYnJ1cyxcclxuICAgIG5hbWU6ICfQk9C+0YDQsCDQrdC70YzQsdGA0YPRgSdcclxuICB9LFxyXG4gIHtcclxuICAgIGxpbms6IGRvbWJpeSxcclxuICAgIG5hbWU6ICfQlNC+0LzQsdCw0LknXHJcbiAgfSxcclxuICB7XHJcbiAgICBsaW5rOiBiaWthbCxcclxuICAgIG5hbWU6ICfQkdCw0LnQutCw0LsnXHJcbiAgfSxcclxuICB7XHJcbiAgICBsaW5rOiBzb2NoaSxcclxuICAgIG5hbWU6ICfQodC+0YfQuCdcclxuICB9LFxyXG4gIHtcclxuICAgIGxpbms6IGthcmVsaWEsXHJcbiAgICBuYW1lOiAn0JrQsNGA0LXQu9C40Y8nXHJcbiAgfSxcclxuXTtcclxuXHJcblxyXG5jb25zdCBwcm9maWxlUG9wdXBPcGVuQnV0dG9uID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnByb2ZpbGVfX2VkaXQtYnV0dG9uJyk7XHJcbmNvbnN0IHByb2ZUaXRsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wcm9maWxlX190aXRsZScpO1xyXG5jb25zdCBwcm9mU3VidGl0bGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fc3VidGl0bGUnKTtcclxuY29uc3QgcHJvZmlsZVBvcHVwID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnBvcHVwX3Byb2ZpbGVfZWRpdGluZycpO1xyXG5jb25zdCBwcm9maWxl0KFsb3NlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlLWljb25fcHJvZmlsZV9lZGl0Jyk7XHJcbmNvbnN0IG5hbWVJbnB1dCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX19maWVsZF9pdGVtX25hbWUnKTtcclxuY29uc3Qgam9iSW5wdXQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuZm9ybV9fZmllbGRfaXRlbV9qb2InKTtcclxuY29uc3QgcHJvZmlsZUZvcm1Qb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX3Byb2ZpbGVfZWRpdCcpO1xyXG4vLyDQv9C10YDQtdC80LXQvdC90YvQtSDQtNC70Y8g0L/QvtC/0LDQv9CwINC00L7QsdCw0LLQu9C10L3QuNC1INC60LDRgNGC0L7Rh9C10LpcclxuY29uc3QgcG9wdXBBZGRDYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9jb250YWluZXJfY2FyZHMnKTtcclxuY29uc3QgYnV0dG9uQWRkQ2FyZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucHJvZmlsZV9fYWRkLWJ1dHRvbicpO1xyXG5jb25zdCBjYXJkc0Nsb3NlUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlLWljb25fY2xvc2VfY2FyZHMnKTtcclxuY29uc3QgZm9ybUNhcmRzUG9wdXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Zvcm1fYWRkX2NhcmRzJyk7XHJcbmNvbnN0IGltcHV0VGl0bGVDYXJkcyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5mb3JtX19maWVsZF9pdGVtX3RpdGxlJyk7XHJcbmNvbnN0IGlucHV0TGlua0NhcmRzID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLmZvcm1fX2ZpZWxkX2l0ZW1fbGluaycpO1xyXG5jb25zdCB1c2Vyc09ubGluZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZW1wbGF0ZS1jb250YWluZXInKTtcclxuY29uc3QgcG9wdXBDbG9zQ2FyZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfY29udGVudF9pbWFnZScpO1xyXG5jb25zdCBpbWFnZUNhcmRzbWFnZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UnKTtcclxuY29uc3QgaW1hZ2VQb3B1cCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy50ZW1wbGF0ZS1jb250YWluZXInKTtcclxuY29uc3QgYnV0dG5DbG9zZVBvcHVwQ2FyZHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucG9wdXBfX2Nsb3NlLWljb25fY2xvc2VfaW1hZ2UnKTtcclxuY29uc3QgZmlnY2FwdGlvbiA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5wb3B1cF9faW1hZ2UtY2FwdGlvbicpO1xyXG5cclxuLy8g0L7QsdC10LrRgiDQstCw0LvQuNC00LDRhtC40LhcclxuY29uc3QgY29uZmlnID0ge1xyXG4gIGZvcm1TZWxlY3RvcjogJy5wb3B1cF9fZm9ybScsXHJcbiAgaW5wdXRTZWxlY3RvcjogJy5mb3JtX19maWVsZCcsXHJcbiAgc3VibWl0QnV0dG9uU2VsZWN0b3I6ICcuZm9ybV9fYnV0dG9uJyxcclxuICBpbmFjdGl2ZUJ1dHRvbkNsYXNzOiAnZm9ybV9fYnV0dG9uX2J0bl9ub3RhY3RpdmUnLFxyXG4gIGlucHV0RXJyb3JDbGFzczogJ2Zvcm1fX2ZpZWxkX2Vycm9yX2FjdGl2ZScsXHJcbiAgZXJyb3JDbGFzczogJ2Zvcm1fX2ZpZWxkLWVycm9yX3N0YXR1c19lcnJvcidcclxufTtcclxuXHJcblxyXG5cclxuZXhwb3J0IHsgcHJvZmlsZVBvcHVwT3BlbkJ1dHRvbiwgcHJvZlRpdGxlLCBwcm9mU3VidGl0bGUsIHByb2ZpbGVQb3B1cCwgcHJvZmlsZdChbG9zZVBvcHVwLCBuYW1lSW5wdXQsIGpvYklucHV0LCBcclxuICBwcm9maWxlRm9ybVBvcHVwLCBwb3B1cEFkZENhcmRzLCBidXR0b25BZGRDYXJkcywgY2FyZHNDbG9zZVBvcHVwLCBmb3JtQ2FyZHNQb3B1cCwgaW1wdXRUaXRsZUNhcmRzLCBpbnB1dExpbmtDYXJkcywgXHJcbiAgdXNlcnNPbmxpbmUsIHBvcHVwQ2xvc0NhcmRzLCBpbWFnZUNhcmRzbWFnZSwgaW1hZ2VQb3B1cCwgYnV0dG5DbG9zZVBvcHVwQ2FyZHMsIGZpZ2NhcHRpb24sIGNvbmZpZywgaW5pdGlhbENhcmRzIH0iLCJpbXBvcnQgJy4uL3BhZ2VzL2luZGV4LmNzcyc7XHJcblxyXG5pbXBvcnQgQ2FyZCAgZnJvbSBcIi4uL2NvbXBvbmVudHMvQ2FyZC5qc1wiO1xyXG5pbXBvcnQgRm9ybVZhbGlkYXRvciBmcm9tICcuLi9jb21wb25lbnRzL0Zvcm1WYWxpZGF0b3IuanMnO1xyXG5pbXBvcnQgUG9wdXBXaXRoRm9ybSBmcm9tIFwiLi4vY29tcG9uZW50cy9Qb3B1cFdpdGhGb3JtLmpzXCI7XHJcbmltcG9ydCBQb3B1cFdpdGhJbWFnZSBmcm9tICcuLi9jb21wb25lbnRzL1BvcHVwV2l0aEltYWdlLmpzJztcclxuaW1wb3J0IFNlY3Rpb24gZnJvbSAnLi4vY29tcG9uZW50cy9TZWN0aW9uLmpzJztcclxuaW1wb3J0IFVzZXJJbmZvIGZyb20gXCIuLi9jb21wb25lbnRzL1VzZXJJbmZvLmpzXCI7XHJcbmltcG9ydCB7IFxyXG4gIHByb2ZpbGVQb3B1cE9wZW5CdXR0b24sIG5hbWVJbnB1dCwgam9iSW5wdXQsIHByb2ZpbGVGb3JtUG9wdXAsIGJ1dHRvbkFkZENhcmRzLCBmb3JtQ2FyZHNQb3B1cCwgXHJcbiAgaW1wdXRUaXRsZUNhcmRzLCBpbnB1dExpbmtDYXJkcywgdXNlcnNPbmxpbmUsIGltYWdlQ2FyZHNtYWdlLCBidXR0bkNsb3NlUG9wdXBDYXJkcywgXHJcbiAgZmlnY2FwdGlvbiwgY29uZmlnLCBpbml0aWFsQ2FyZHMgfSBmcm9tICcuLi91dGlscy9jb25zdGFudHMuanMnO1xyXG5cclxuICBcclxuLy/QktC60LvRjtGH0LDQtdC8INCy0LDQu9C40LTQsNGG0LjRjiDRhNC+0YDQvFxyXG5jb25zdCBmb3JtVmFsaWRhdG9yRWRpdCA9IG5ldyBGb3JtVmFsaWRhdG9yKGNvbmZpZywgcHJvZmlsZUZvcm1Qb3B1cCk7XHJcbmNvbnN0IGZvcm1WYWxpZGF0b3JDYXJkID0gbmV3IEZvcm1WYWxpZGF0b3IoY29uZmlnLCBmb3JtQ2FyZHNQb3B1cCk7XHJcblxyXG5mb3JtVmFsaWRhdG9yRWRpdC5lbmFibGVWYWxpZGF0aW9uKCk7XHJcbmZvcm1WYWxpZGF0b3JDYXJkLmVuYWJsZVZhbGlkYXRpb24oKTtcclxuXHJcbi8vINCf0L7Qv9Cw0L8gINC/0YDQvtGB0LzQvtGC0YAg0LrQsNGA0YLQuNC90L7QulxyXG5jb25zdCBwb3B1cFNob3dJbWFnZUNhcmRzID0gbmV3IFBvcHVwV2l0aEltYWdlKCcucG9wdXBfY29udGVudF9pbWFnZScsIGltYWdlQ2FyZHNtYWdlLCBmaWdjYXB0aW9uKTtcclxucG9wdXBTaG93SW1hZ2VDYXJkcy5zZXRFdmVudExpc3RlbmVycygpO1xyXG5cclxuLy/RhNGD0L3QutGG0LjRjyAg0L7RgtC60YDRi9GC0LjQtSDQv9C+0L/QsNC/0LAg0L/RgNC+0YHQvNC+0YLRgNCwINC60LDRgNGC0L7Rh9C10LogXHJcbmZ1bmN0aW9uIGhhbmRsZUNhcmRDbGljayAobGluaywgbmFtZSkge1xyXG4gIHBvcHVwU2hvd0ltYWdlQ2FyZHMub3BlblBvcHVwKHsgbGlua0VsZW1lbnQ6IGxpbmssIHRpdGxlRWxlbWVudDogbmFtZX0pO1xyXG59O1xyXG5cclxuLy8g0L7QsdGA0LDQsdC+0YLRh9C40Log0LfQsNC60YDRi9GC0LjRjyDQv9C+0L/QsNC/0LAg0L/RgNC+0YHQvNC+0YLRgNCwINC60LDRgNGC0LjQvdC+0Log0Lgg0LTQvtCx0LDQstC70LXQvdC40LUg0LjQvdGE0L7RgNC80LDRhtC40LhcclxuYnV0dG5DbG9zZVBvcHVwQ2FyZHMuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCAoKSA9PiBwb3B1cFNob3dJbWFnZUNhcmRzLmNsb3NlUG9wdXAoJy5wb3B1cF9jb250ZW50X2ltYWdlJykpO1xyXG5cclxuLy/QlNCw0L3QvdGL0LUg0L/RgNC+0YTQuNC70Y8g0L3QsCDRgdGC0YDQsNC90LjRhtC1XHJcbmNvbnN0IGluZm9Qcm9maWxlID0gbmV3IFVzZXJJbmZvKHsgbmFtZVNlbGVjdG9yOiAnLnByb2ZpbGVfX3RpdGxlJywgaW5mb1NlbGVjdG9yOiAnLnByb2ZpbGVfX3N1YnRpdGxlJ30pO1xyXG5cclxuXHJcbi8vINCf0L7Qv9Cw0L8g0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDQv9GA0L7RhNC40LvRj1xyXG5jb25zdCBwb3B1cFdpdGhQcm9maWxlID0gbmV3IFBvcHVwV2l0aEZvcm0oJy5wb3B1cF9wcm9maWxlX2VkaXRpbmcnLCBlZGl0UHJvZmlsZSk7XHJcbnBvcHVwV2l0aFByb2ZpbGUuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8vINCe0YLQutGA0YvQstCw0LXQvCDQv9C+0L/QsNC/INGA0LXQtNCw0LrRgtC40YDQvtCy0LDQvdC40LUg0L/RgNC+0YTQuNC70Y9cclxucHJvZmlsZVBvcHVwT3BlbkJ1dHRvbi5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIG9wZW5lZFByb2ZpbGVJbmZvKTtcclxuXHJcbi8v0KTRg9C90LrRhtC40Y8g0L7RgtC60YDRi9GC0LjRjyDQv9C+0L/QsNC/0LAg0YDQtdC00LDQutGC0LjRgNC+0LLQsNC90LjQtSDQv9GA0L7RhNC40LvRjyBcclxuZnVuY3Rpb24gb3BlbmVkUHJvZmlsZUluZm8gKCkge1xyXG4gIGNvbnN0IHVzZXJQcm9maWxlID0gaW5mb1Byb2ZpbGUuZ2V0VXNlckluZm8oKTtcclxuICBuYW1lSW5wdXQudmFsdWUgPSB1c2VyUHJvZmlsZS5uYW1lO1xyXG4gIGpvYklucHV0LnZhbHVlID0gdXNlclByb2ZpbGUuaW5mbztcclxuICBwb3B1cFdpdGhQcm9maWxlLm9wZW5Qb3B1cCgpO1xyXG4gIGZvcm1WYWxpZGF0b3JFZGl0LnRvZ2dsZUJ1dHRvblN0YXRlKCk7XHJcbiAgZm9ybVZhbGlkYXRvckVkaXQuaGlkZUlucHV0U2VsZWN0b3JFcnJvcigpO1xyXG59O1xyXG5cclxuLy/QpNGD0L3QutGG0LjRjyDQuNC30LzQtdC90LXQvdC40Y8g0LjQvdGE0L7RgNC80LDRhtC40Lgg0LIg0L/RgNC+0YTQuNC70LVcclxuZnVuY3Rpb24gZWRpdFByb2ZpbGUgKCkge1xyXG4gIGluZm9Qcm9maWxlLnNldFVzZXJJbmZvKHtuYW1lOiBuYW1lSW5wdXQudmFsdWUsIGluZm86IGpvYklucHV0LnZhbHVlIH0pO1xyXG4gIHBvcHVwV2l0aFByb2ZpbGUuY2xvc2VQb3B1cCgpXHJcbn07XHJcblxyXG4vLyDQn9C+0L/QsNC/INC00L7QsdCw0LLQu9C10L3QuNC40LUg0LrQsNGA0YLQvtGH0LXQulxyXG5jb25zdCBwb3B1cENhcmRzQWRkID0gbmV3IFBvcHVwV2l0aEZvcm0oJy5wb3B1cF9jb250YWluZXJfY2FyZHMnLCBzdWJtaXRBZGRDYXJkRm9ybSk7XHJcbnBvcHVwQ2FyZHNBZGQuc2V0RXZlbnRMaXN0ZW5lcnMoKTtcclxuXHJcbi8v0KTRg9C90LrRhtC40Y8g0L7RgtC60YDRi9GC0LjQtSDQv9C+0L/QsNC/0LAg0LTQvtCx0LDQstC70LXQvdC40Y8g0LrQsNGA0YLQvtGH0LXQulxyXG5mdW5jdGlvbiBvcGVuUG9wdXBBZGRDYXJkcyAoKSB7XHJcbiAgcG9wdXBDYXJkc0FkZC5vcGVuUG9wdXAoKTtcclxuICBmb3JtVmFsaWRhdG9yQ2FyZC50b2dnbGVCdXR0b25TdGF0ZSgpO1xyXG4gIGZvcm1WYWxpZGF0b3JDYXJkLmhpZGVJbnB1dFNlbGVjdG9yRXJyb3IoKTtcclxufTtcclxuXHJcbi8vINCh0LvRg9GI0LDRgtC10LvRjCDQvtGC0LrRgNGL0YLQuNC1INC/0L7Qv9Cw0L/QsCDQtNC+0LHQsNCy0LvQtdC90LjQtSDQutCw0YDRgtC+0YfQtdC6XHJcbmJ1dHRvbkFkZENhcmRzLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgb3BlblBvcHVwQWRkQ2FyZHMpO1xyXG5cclxuLy8g0KTRg9C90LrRhtC40Y8g0L7RgtGA0LjRgdC+0LLQutC4INC60LDRgNGC0L7Rh9C60Lgg0YfQtdGA0LXQtyDRhNC+0YDQvNGDXHJcbmZ1bmN0aW9uIHN1Ym1pdEFkZENhcmRGb3JtKCkge1xyXG4gIGNvbnN0IGZvcm1JdGVtTGlua3MgPSBpbnB1dExpbmtDYXJkcy52YWx1ZTtcclxuICBjb25zdCBmb3JtSXRlbVRpdGxlID0gaW1wdXRUaXRsZUNhcmRzLnZhbHVlO1xyXG4gIC8v0KHQvtC30LTQsNC10Lwg0L7QsdGK0LXQutGCINGB0L/QvtC70Y/QvNC4INCy0LLQvtC00LBcclxuICBjb25zdCBlbGVtZW50ID0ge1xyXG4gIGxpbms6IGZvcm1JdGVtTGlua3MsXHJcbiAgbmFtZTogZm9ybUl0ZW1UaXRsZSxcclxuICB9XHJcbiAgLy8g0YHQvtC30LTQsNC10Lwg0LrQsNGA0YLQvtGH0LrRg1xyXG4gIGNvbnN0IG5ld0NhcmRGb3JtID0gY3JlYXRlQ2FyZHMoZWxlbWVudClcclxuICAvL9Cg0LDQt9C80LXRidCw0LXQvCDQutCw0YDRgtC+0YfQutGDINC90LAg0YHRgtGA0LDQvdC40YbQtVxyXG4gIGRlZmF1bHRDYXJkTGlzdC5hZGRJdGVtKG5ld0NhcmRGb3JtKTtcclxuICBwb3B1cENhcmRzQWRkLmNsb3NlUG9wdXAoKVxyXG59O1xyXG5cclxuLy8g0KTRg9C90LrRhtC40Y8g0YHQvtC30LTQsNC90LjRjyDQutCw0YDRgtC+0YfQtdC6XHJcbmNvbnN0IGNyZWF0ZUNhcmRzID0gKGl0ZW0pID0+IHtcclxuICBjb25zdCBjYXJkID0gbmV3IENhcmQoaXRlbSwgJy5lbGVtZW50cycsIGhhbmRsZUNhcmRDbGljayk7XHJcbiAgY29uc3QgY2FyZEVsZW1lbnQgPSBjYXJkLmdlbmVyYXRlQ2FyZCgpO1xyXG4gIHJldHVybiBjYXJkRWxlbWVudFxyXG59O1xyXG5cclxuLy8g0JTQvtCx0LDQstC70Y/QtdC8INC60LDRgNGC0L7Rh9C60Lgg0L/QviDQtNC10YTQvtC70YLRg1xyXG5jb25zdCBkZWZhdWx0Q2FyZExpc3QgPSBuZXcgU2VjdGlvbiAoe1xyXG4gIC8v0LzQsNGB0YHQuNCyINC60LDRgNGC0L7Rh9C10LpcclxuICBpdGVtczogaW5pdGlhbENhcmRzLFxyXG4gIC8v0YTRg9C90LrRhtC40Y8g0L7RgtCy0LXRh9Cw0LXRgiDQt9CwINGB0L7Qt9C00LDQvdC40LUg0Lgg0L7RgtGA0LjRgdC+0LLQutGDINC00LDQvdC90YvRhSDQvdCwINGB0YLRgNCw0L3QuNGG0LUuXHJcbiAgcmVuZGVyZXI6IChpdGVtKSA9PiB7XHJcbiAgICBjb25zdCBjYXJkcyA9IGNyZWF0ZUNhcmRzKGl0ZW0pO1xyXG4gICAgZGVmYXVsdENhcmRMaXN0LmFkZEl0ZW0oY2FyZHMpO1xyXG4gIH1cclxufSxcclxudXNlcnNPbmxpbmVcclxuKTtcclxuXHJcbmRlZmF1bHRDYXJkTGlzdC5pbml0aWFsQ2FyZHMoKTtcclxuXHJcblxyXG4iXSwibmFtZXMiOlsiX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fIiwiX193ZWJwYWNrX3JlcXVpcmVfXyIsIm1vZHVsZUlkIiwiY2FjaGVkTW9kdWxlIiwidW5kZWZpbmVkIiwiZXhwb3J0cyIsIm1vZHVsZSIsIl9fd2VicGFja19tb2R1bGVzX18iLCJwIiwiQ2FyZCIsImRhdGEiLCJjYXJkU2VsZWN0b3IiLCJoYW5kbGVDYXJkQ2xpY2siLCJ0aGlzIiwiX2xpbmsiLCJsaW5rIiwiX25hbWUiLCJuYW1lIiwiX2NhcmRTZWxlY3RvciIsIl9oYW5kbGVDYXJkQ2xpY2siLCJkb2N1bWVudCIsInF1ZXJ5U2VsZWN0b3IiLCJjb250ZW50IiwiY2xvbmVOb2RlIiwiX2VsZW1lbnQiLCJfZ2V0VGVtcGxhdGUiLCJfc2V0RXZlbnRMaXN0ZW5lcnMiLCJfbmV3SW1hZ2VFbGVtZW50IiwiX25ld1RleHRFbGVtZW50Iiwic3JjIiwiYWx0IiwidGV4dENvbnRlbnQiLCJjbGFzc0xpc3QiLCJ0b2dnbGUiLCJyZW1vdmUiLCJhZGRFdmVudExpc3RlbmVyIiwiX3RvZ2dsZUxpa2VDYXJkIiwiX2RlbGV0ZUNhcmQiLCJGb3JtVmFsaWRhdG9yIiwiY29uZmlnIiwiZm9ybUVsZW1lbnQiLCJfaW5wdXRTZWxlY3RvciIsImlucHV0U2VsZWN0b3IiLCJfc3VibWl0QnV0dG9uU2VsZWN0b3IiLCJzdWJtaXRCdXR0b25TZWxlY3RvciIsIl9pbmFjdGl2ZUJ1dHRvbkNsYXNzIiwiaW5hY3RpdmVCdXR0b25DbGFzcyIsIl9pbnB1dEVycm9yQ2xhc3MiLCJpbnB1dEVycm9yQ2xhc3MiLCJfZXJyb3JDbGFzcyIsImVycm9yQ2xhc3MiLCJfaW5wdXRMaXN0IiwicXVlcnlTZWxlY3RvckFsbCIsIl9zdWJtaXRCdXR0b24iLCJfZm9ybUVsZW1lbnQiLCJpbnB1dEVsZW1lbnQiLCJlcnJvck1lc3NhZ2UiLCJlcnJvckVsZW1lbnQiLCJpZCIsImFkZCIsInZhbGlkaXR5IiwidmFsaWQiLCJfaGlkZUlucHV0RXJyb3IiLCJfc2hvd0lucHV0RXJyb3IiLCJ2YWxpZGF0aW9uTWVzc2FnZSIsImZvckVhY2giLCJjaGVja1ZhbGlkaXR5IiwicmVtb3ZlQXR0cmlidXRlIiwic2V0QXR0cmlidXRlIiwiQXJyYXkiLCJmcm9tIiwiX2lzVmFsaWQiLCJ0b2dnbGVCdXR0b25TdGF0ZSIsImV2dCIsInByZXZlbnREZWZhdWx0IiwiUG9wdXAiLCJwb3B1cFNlbGVjdG9yIiwiX3BvcHVwIiwiX2hhbmRsZUNsb3NlRXNjIiwiYmluZCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJldmVudCIsImtleSIsImNsb3NlUG9wdXAiLCJ0YXJnZXQiLCJjb250YWlucyIsIlBvcHVwV2l0aEZvcm0iLCJzdWJtaXRGb3JtIiwiX3BvcHVwRm9ybSIsIl9zdWJtaXRGb3JtIiwiX2lucHV0VmFsdWVzIiwiaW5wdXQiLCJ2YWx1ZSIsInJlc2V0IiwiUG9wdXBXaXRoSW1hZ2UiLCJwb3B1cEltYWdlIiwicG9wdXBUaXRsZSIsIl9wb3B1cEltYWdlIiwiX3BvcHVwVGl0bGUiLCJsaW5rRWxlbWVudCIsInRpdGxlRWxlbWVudCIsIlNlY3Rpb24iLCJzZWxlY3RvckNvbnRhaW5lciIsIml0ZW1zIiwicmVuZGVyZXIiLCJfaXRlbXMiLCJfcmVuZGVyZXIiLCJfY29udGFpbmVyU2VsZWN0b3IiLCJpdGVtIiwiZWxlbWVudCIsInByZXBlbmQiLCJVc2VySW5mbyIsIm5hbWVTZWxlY3RvciIsImluZm9TZWxlY3RvciIsIl9pbmZvIiwiaW5mbyIsImluaXRpYWxDYXJkcyIsInByb2ZpbGVQb3B1cE9wZW5CdXR0b24iLCJuYW1lSW5wdXQiLCJqb2JJbnB1dCIsInByb2ZpbGVGb3JtUG9wdXAiLCJidXR0b25BZGRDYXJkcyIsImZvcm1DYXJkc1BvcHVwIiwiaW1wdXRUaXRsZUNhcmRzIiwiaW5wdXRMaW5rQ2FyZHMiLCJ1c2Vyc09ubGluZSIsImltYWdlQ2FyZHNtYWdlIiwiYnV0dG5DbG9zZVBvcHVwQ2FyZHMiLCJmaWdjYXB0aW9uIiwiZm9ybVNlbGVjdG9yIiwiZm9ybVZhbGlkYXRvckVkaXQiLCJmb3JtVmFsaWRhdG9yQ2FyZCIsImVuYWJsZVZhbGlkYXRpb24iLCJwb3B1cFNob3dJbWFnZUNhcmRzIiwib3BlblBvcHVwIiwic2V0RXZlbnRMaXN0ZW5lcnMiLCJpbmZvUHJvZmlsZSIsInBvcHVwV2l0aFByb2ZpbGUiLCJzZXRVc2VySW5mbyIsInVzZXJQcm9maWxlIiwiZ2V0VXNlckluZm8iLCJoaWRlSW5wdXRTZWxlY3RvckVycm9yIiwicG9wdXBDYXJkc0FkZCIsImZvcm1JdGVtTGlua3MiLCJmb3JtSXRlbVRpdGxlIiwibmV3Q2FyZEZvcm0iLCJjcmVhdGVDYXJkcyIsImRlZmF1bHRDYXJkTGlzdCIsImFkZEl0ZW0iLCJnZW5lcmF0ZUNhcmQiLCJjYXJkcyJdLCJzb3VyY2VSb290IjoiIn0=